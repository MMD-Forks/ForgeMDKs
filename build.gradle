import org.gradle.util.GradleVersion
buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below

        // Doesn't work on Gradle 1.x
        if ((GradleVersion.current() >= GradleVersion.version('2.0')) && (JavaVersion.current().isJava8Compatible())) {
            // Doesn't work on Gradle 1.0-1.5
            removeIf { it instanceof MavenArtifactRepository && it.url.host == 'repo1.maven.org' }
            removeIf { it instanceof MavenArtifactRepository && it.url.host == 'files.minecraftforge.net' }
            removeIf { it instanceof MavenArtifactRepository && it.url.host == 'maven.minecraftforge.net' }
        } else {
            all {
                // Doesn't work on Gradle 1.0-1.5
                ArtifactRepository repo ->
                if (repo instanceof MavenArtifactRepository) {
                    if ((repo.url.toString() == 'repo1.maven.org') || (repo.url.toString() == 'files.minecraftforge.net') || (repo.url.toString() == 'maven.minecraftforge.net')) {
                        remove repo
                    }
                }
            }
        }
//      mavenLocal()
//      mavenCentral()
        maven {
            name 'mavenCentral'
            url = 'https://repo1.maven.org/maven2/'
        }
        maven {
            name = 'mmd'
            url = 'https://maven.mcmoddev.com'
        }
//      maven {
//          name = 'forge'
//          url = 'https://maven.minecraftforge.net'
//      }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

// Mojang ships Java 8 to end users, so your mod should target Java 8.
// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

// Print out JVM information so that we know what version is running. Extremely useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200916-1.16.2'

    // makeObfSourceJar = false // an SRG-named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed (Separated by commas).
            // 'SCAN': For mods scan.
            // 'REGISTRIES': For firing of registry events.
            // 'REGISTRYDUMP': For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed (Separated by commas).
            // 'SCAN': For mods scan.
            // 'REGISTRIES': For firing of registry events.
            // 'REGISTRYDUMP': For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed (Separated by commas).
            // 'SCAN': For mods scan.
            // 'REGISTRIES': For firing of registry events.
            // 'REGISTRYDUMP': For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    // Doesn't work on Gradle 1.x
    if ((GradleVersion.current() >= GradleVersion.version('2.0')) && JavaVersion.current().isJava8Compatible()) {
        // Doesn't work on Gradle 1.0-1.5
        removeIf { it instanceof MavenArtifactRepository && it.url.host == 'repo1.maven.org' }
        removeIf { it instanceof MavenArtifactRepository && it.url.host == 'files.minecraftforge.net' }
        removeIf { it instanceof MavenArtifactRepository && it.url.host == 'maven.minecraftforge.net' }
    } else {
        all {
            // Doesn't work on Gradle 1.0-1.5
            ArtifactRepository repo ->
            if (repo instanceof MavenArtifactRepository) {
                if ((repo.url.toString() == 'repo1.maven.org') || (repo.url.toString() == 'files.minecraftforge.net') || (repo.url.toString() == 'maven.minecraftforge.net')) {
                    remove repo
                }
            }
        }
    }
//  mavenLocal()
//  mavenCentral()
    maven {
        name 'mavenCentral'
        url = 'https://repo1.maven.org/maven2/'
    }
    maven {
        name = 'mmd'
        url = 'https://maven.mcmoddev.com'
    }
//  maven {
//      name = 'forge'
//      url = 'https://maven.minecraftforge.net'
//  }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.2-33.0.61'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                'Specification-Title'     : 'examplemod',
                'Specification-Vendor'    : 'examplemodsareus',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
//                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : 'examplemodsareus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

idea.module {
  downloadJavadoc = true
  inheritOutputDirs = true
}

if (GradleVersion.current() <= GradleVersion.version('2.3')) {
    task wrapper(type: Wrapper) {
        gradleVersion = '4.9'
        if (GradleVersion.current() >= GradleVersion.version('1.0') && GradleVersion.current() <= GradleVersion.version('1.11')) {
            distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
        }
    }
}
